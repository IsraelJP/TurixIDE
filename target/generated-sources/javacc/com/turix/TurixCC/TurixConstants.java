/* Generated By:JavaCC: Do not edit this line. TurixConstants.java */
package com.turix.TurixCC;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TurixConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUM = 5;
  /** RegularExpression Id. */
  int STRING_LITERAL = 6;
  /** RegularExpression Id. */
  int MAS = 7;
  /** RegularExpression Id. */
  int MENOS = 8;
  /** RegularExpression Id. */
  int MULTIPLICACION = 9;
  /** RegularExpression Id. */
  int DIVISION = 10;
  /** RegularExpression Id. */
  int MODULO = 11;
  /** RegularExpression Id. */
  int DOUBLE = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int UINT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int STRING = 16;
  /** RegularExpression Id. */
  int BOOL = 17;
  /** RegularExpression Id. */
  int CHARACTER = 18;
  /** RegularExpression Id. */
  int LETTER = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int REL_OP = 23;
  /** RegularExpression Id. */
  int DOS_PUN = 24;
  /** RegularExpression Id. */
  int FLECHA = 25;
  /** RegularExpression Id. */
  int COMILLA = 26;
  /** RegularExpression Id. */
  int COMA = 27;
  /** RegularExpression Id. */
  int INTERROGACION = 28;
  /** RegularExpression Id. */
  int IGUAL = 29;
  /** RegularExpression Id. */
  int CLASS = 30;
  /** RegularExpression Id. */
  int DEINIT = 31;
  /** RegularExpression Id. */
  int ENUM = 32;
  /** RegularExpression Id. */
  int EXTENSION = 33;
  /** RegularExpression Id. */
  int FUNC = 34;
  /** RegularExpression Id. */
  int IMPORT = 35;
  /** RegularExpression Id. */
  int INIT = 36;
  /** RegularExpression Id. */
  int INOUT = 37;
  /** RegularExpression Id. */
  int INTERNAL = 38;
  /** RegularExpression Id. */
  int LET = 39;
  /** RegularExpression Id. */
  int OPERATOR = 40;
  /** RegularExpression Id. */
  int PRIVATE = 41;
  /** RegularExpression Id. */
  int PUBLIC = 42;
  /** RegularExpression Id. */
  int STATIC = 43;
  /** RegularExpression Id. */
  int STRUCT = 44;
  /** RegularExpression Id. */
  int SUBSCRIPT = 45;
  /** RegularExpression Id. */
  int TYPEALIAS = 46;
  /** RegularExpression Id. */
  int VAR = 47;
  /** RegularExpression Id. */
  int TERMINATOR = 48;
  /** RegularExpression Id. */
  int SEPARATOR = 49;
  /** RegularExpression Id. */
  int BREAK = 50;
  /** RegularExpression Id. */
  int CASE = 51;
  /** RegularExpression Id. */
  int CONTINUE = 52;
  /** RegularExpression Id. */
  int DEFAULT_KEYWORD = 53;
  /** RegularExpression Id. */
  int DO = 54;
  /** RegularExpression Id. */
  int ELSE = 55;
  /** RegularExpression Id. */
  int FALLTHROUGH = 56;
  /** RegularExpression Id. */
  int FOR = 57;
  /** RegularExpression Id. */
  int IF = 58;
  /** RegularExpression Id. */
  int IN = 59;
  /** RegularExpression Id. */
  int RETURN = 60;
  /** RegularExpression Id. */
  int SWITCH = 61;
  /** RegularExpression Id. */
  int WHERE = 62;
  /** RegularExpression Id. */
  int WHILE = 63;
  /** RegularExpression Id. */
  int K_I = 64;
  /** RegularExpression Id. */
  int K_F = 65;
  /** RegularExpression Id. */
  int PAR_I = 66;
  /** RegularExpression Id. */
  int PAR_F = 67;
  /** RegularExpression Id. */
  int COR_I = 68;
  /** RegularExpression Id. */
  int COR_F = 69;
  /** RegularExpression Id. */
  int AS = 70;
  /** RegularExpression Id. */
  int CATCH = 71;
  /** RegularExpression Id. */
  int FALSE = 72;
  /** RegularExpression Id. */
  int IS = 73;
  /** RegularExpression Id. */
  int NIL = 74;
  /** RegularExpression Id. */
  int RETHROWS = 75;
  /** RegularExpression Id. */
  int SUPER = 76;
  /** RegularExpression Id. */
  int SELF = 77;
  /** RegularExpression Id. */
  int SELF_CAP = 78;
  /** RegularExpression Id. */
  int THROW = 79;
  /** RegularExpression Id. */
  int THROWS = 80;
  /** RegularExpression Id. */
  int TRUE = 81;
  /** RegularExpression Id. */
  int TRY = 82;
  /** RegularExpression Id. */
  int ASSOCIATIVITY = 83;
  /** RegularExpression Id. */
  int CONVENIENCE = 84;
  /** RegularExpression Id. */
  int DYNAMIC = 85;
  /** RegularExpression Id. */
  int DIDSET = 86;
  /** RegularExpression Id. */
  int FINAL = 87;
  /** RegularExpression Id. */
  int GET = 88;
  /** RegularExpression Id. */
  int INFIX = 89;
  /** RegularExpression Id. */
  int INDIRECT = 90;
  /** RegularExpression Id. */
  int LAZY = 91;
  /** RegularExpression Id. */
  int LEFT = 92;
  /** RegularExpression Id. */
  int MUTATING = 93;
  /** RegularExpression Id. */
  int NONE = 94;
  /** RegularExpression Id. */
  int NONMUTATING = 95;
  /** RegularExpression Id. */
  int OPTIONAL = 96;
  /** RegularExpression Id. */
  int OVERRIDE = 97;
  /** RegularExpression Id. */
  int POSTFIX = 98;
  /** RegularExpression Id. */
  int PRECEDENCE = 99;
  /** RegularExpression Id. */
  int PREFIX = 100;
  /** RegularExpression Id. */
  int PROTOCOL = 101;
  /** RegularExpression Id. */
  int PROTOCOL_CAP = 102;
  /** RegularExpression Id. */
  int REQUIRED = 103;
  /** RegularExpression Id. */
  int RIGHT = 104;
  /** RegularExpression Id. */
  int SET = 105;
  /** RegularExpression Id. */
  int TYPE = 106;
  /** RegularExpression Id. */
  int UNOWNED = 107;
  /** RegularExpression Id. */
  int WEAK = 108;
  /** RegularExpression Id. */
  int WILLSET = 109;
  /** RegularExpression Id. */
  int PRINT = 110;
  /** RegularExpression Id. */
  int READLINE = 111;
  /** RegularExpression Id. */
  int IDENT = 112;
  /** RegularExpression Id. */
  int ERROR = 113;
  /** RegularExpression Id. */
  int ERROROPERA = 114;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<NUM>",
    "<STRING_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"Double\"",
    "\"Int\"",
    "\"UInt\"",
    "\"Float\"",
    "\"String\"",
    "\"Bool\"",
    "\"Character\"",
    "<LETTER>",
    "\"&&\"",
    "\"!\"",
    "\"||\"",
    "<REL_OP>",
    "\":\"",
    "\"->\"",
    "\"\\\"\"",
    "\",\"",
    "\"??\"",
    "\"=\"",
    "\"class\"",
    "\"deinit\"",
    "\"enum\"",
    "\"extension\"",
    "\"func\"",
    "\"import\"",
    "\"init\"",
    "\"inout\"",
    "\"internal\"",
    "\"let\"",
    "\"operator\"",
    "\"private\"",
    "\"public\"",
    "\"static\"",
    "\"struct\"",
    "\"subscript\"",
    "\"typealias\"",
    "\"var\"",
    "\"terminator\"",
    "\"separator\"",
    "\"break\"",
    "\"case\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"fallthrough\"",
    "\"for\"",
    "\"if\"",
    "\"in\"",
    "\"return\"",
    "\"switch\"",
    "\"where\"",
    "\"while\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"as\"",
    "\"catch\"",
    "\"false\"",
    "\"is\"",
    "\"nil\"",
    "\"rethrows\"",
    "\"super\"",
    "\"self\"",
    "\"Self\"",
    "\"throw\"",
    "\"throws\"",
    "\"true\"",
    "\"try\"",
    "\"associativity\"",
    "\"convenience\"",
    "\"dynamic\"",
    "\"didSet\"",
    "\"final\"",
    "\"get\"",
    "\"infix\"",
    "\"indirect\"",
    "\"lazy\"",
    "\"left\"",
    "\"mutating\"",
    "\"none\"",
    "\"nonmutating\"",
    "\"optional\"",
    "\"override\"",
    "\"postfix\"",
    "\"precedence\"",
    "\"prefix\"",
    "\"protocol\"",
    "\"Protocol\"",
    "\"required\"",
    "\"right\"",
    "\"set\"",
    "\"Type\"",
    "\"unowned\"",
    "\"weak\"",
    "\"willSet\"",
    "\"print\"",
    "\"readLine\"",
    "<IDENT>",
    "<ERROR>",
    "<ERROROPERA>",
  };

}
