/* TurixTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TurixTokenManager.java */
package com.turix.TurixCC;

/** Token Manager. */
public class TurixTokenManager implements TurixConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000L) != 0L)
            return 30;
         if ((active0 & 0xffffffffc007f000L) != 0L || (active1 & 0xffffffffffc0L) != 0L)
         {
            jjmatchedKind = 19;
            return 17;
         }
         if ((active0 & 0x200000L) != 0L)
            return 11;
         if ((active0 & 0x4000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0xf3bfff8fc007f000L) != 0L || (active1 & 0xfffff9f7fd80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0xc40007000000000L) != 0L || (active1 & 0x6080240L) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active0 & 0xf1bf7f7fc007d000L) != 0L || (active1 & 0xfdfffefbf980L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x200808000002000L) != 0L || (active1 & 0x20001040400L) != 0L)
            return 17;
         return -1;
      case 3:
         if ((active0 & 0xf1377f6ac0059000L) != 0L || (active1 & 0xe9ffa6f99980L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
            return 17;
         }
         if ((active0 & 0x88001500024000L) != 0L || (active1 & 0x140058026000L) != 0L)
            return 17;
         return -1;
      case 4:
         if ((active0 & 0x31337f4a80051000L) != 0L || (active1 & 0xa8ffa4780800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 4;
            }
            return 17;
         }
         if ((active0 & 0xc004002040008000L) != 0L || (active1 & 0x410002819180L) != 0L)
            return 17;
         return -1;
      case 5:
         if ((active0 & 0x133634200040000L) != 0L || (active1 & 0xa8efa4380800L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
            return 17;
         }
         if ((active0 & 0x30001c0880011000L) != 0L || (active1 & 0x1000410000L) != 0L)
            return 17;
         return -1;
      case 6:
         if ((active0 & 0x113614200040000L) != 0L || (active1 & 0x80eba4180800L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
            return 17;
         }
         if ((active0 & 0x20020000000000L) != 0L || (active1 & 0x280400200000L) != 0L)
            return 17;
         return -1;
      case 7:
         if ((active0 & 0x103600200040000L) != 0L || (active1 & 0x880180000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
            return 17;
         }
         if ((active0 & 0x10014000000000L) != 0L || (active1 & 0x80e324000800L) != 0L)
            return 17;
         return -1;
      case 8:
         if ((active0 & 0x101000000000000L) != 0L || (active1 & 0x880180000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
            return 17;
         }
         if ((active0 & 0x2600200040000L) != 0L)
            return 17;
         return -1;
      case 9:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x80180000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 9;
            return 17;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x800000000L) != 0L)
            return 17;
         return -1;
      case 10:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 10;
            return 17;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x80100000L) != 0L)
            return 17;
         return -1;
      case 11:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 11;
            return 17;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 21, 11);
      case 34:
         return jjStartNfaWithStates_0(0, 26, 5);
      case 37:
         return jjStopAtPos(0, 11);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 66);
      case 41:
         return jjStopAtPos(0, 67);
      case 42:
         return jjStopAtPos(0, 9);
      case 43:
         return jjStopAtPos(0, 7);
      case 44:
         return jjStopAtPos(0, 27);
      case 45:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 47:
         return jjStopAtPos(0, 10);
      case 58:
         return jjStopAtPos(0, 24);
      case 61:
         return jjStartNfaWithStates_0(0, 29, 30);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 68);
      case 93:
         return jjStopAtPos(0, 69);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80040L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x18000040000000L, 0x100080L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x60000080000000L, 0x600000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000300000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x300000400000000L, 0x800100L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc00007800000000L, 0x6000200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x18000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x300000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x403c00000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x818000000800L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2002380000000000L, 0x20000003000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1400000000000L, 0x78000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x300000000000L);
      case 123:
         return jjStopAtPos(0, 64);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 65);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 63:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x108800000000000L, active1, 0x8000180L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1023008080000000L, active1, 0x928011006800L);
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 17);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000040000L, active1, 0x18000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x210000c00400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000040008000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7100002000L, active1, 0x80006000000L);
      case 111:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x210000000021000L, active1, 0x4c0100000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000000L, active1, 0x407800060000L);
      case 115:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x240400000000L, active1, 0x20001000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x40000200000L);
      case 124:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80040040000L, active1, 0x900000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4400000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004010000000000L, active1, 0x1a00000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x12000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000021080000000L, active1, 0x400000000000L);
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x200000006100L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000400004000L, active1, 0xc0b00000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000028000L, active1, 0x86000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400800000000L, active1, 0x40000001000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 17);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000010000L, active1, 0x18000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x88000000000000L, active1, 0x400080000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 17);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 17);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 17);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000004200000000L, active1, 0x120000880L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100001000L, active1, 0x20000L);
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 17);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x26000000008000L, active1, 0x20a00000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000080L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 17);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 17);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 17);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 17);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x404200000000L, active1, 0x1000L);
      case 102:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 17);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000800L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x106000000L);
      case 107:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 17);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x8100040000000000L, active1, 0x200000000000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x98000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000040000L, active1, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200040000000L, active1, 0x100L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 17);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 17);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x2010080000000000L, active1, 0x6400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000102000000000L, active1, 0x8000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x100000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x430000040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000300000000000L, active1, 0x80000L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 17);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 17);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800500000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 104:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x110c0080000000L, active1, 0x9000000000L);
      case 107:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 17);
         break;
      case 108:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200010000L, active1, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6100000000L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x1002004800000000L, active1, 0x204000800L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 17);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 17);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 17);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 17);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x80000000L);
      case 119:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 120:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 17);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0x6000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x280004000000L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 17);
         break;
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800620280000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x11004000000000L, active1, 0x100100000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x8000000000L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 17);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 17);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 17);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000L, active1, 0x80000000L);
      case 120:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1004000000000L, active1, 0x180080000L);
      case 99:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L);
      case 100:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8800000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x600200000000L, active1, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800020000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x6000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 17);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 120:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 17);
         break;
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 17);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 17);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0x100000L);
      case 103:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 17);
         break;
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 17);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 17);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 17);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 17);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x102000200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 17);
         break;
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 17);
         break;
      case 116:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x80080000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80080000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 17);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 17);
         break;
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 17);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 17);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 99, 17);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 17);
         break;
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 84, 17);
         break;
      case 103:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 17);
         break;
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 56, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if (curChar == 60)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if (curChar == 61)
                     { jjCheckNAddStates(4, 7); }
                  else if (curChar == 33)
                     { jjCheckNAdd(11); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(8, 9); }
                  if (curChar == 60)
                     { jjCheckNAdd(11); }
                  else if (curChar == 62)
                     { jjCheckNAdd(11); }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  else if (curChar == 34)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 34)
                     { jjCheckNAdd(0); }
                  break;
               case 0:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(0, 4); }
                  break;
               case 3:
                  if (curChar == 34 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 8:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 9:
                  if (curChar == 34 && kind > 6)
                     kind = 6;
                  break;
               case 11:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 12:
                  if (curChar == 33)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar == 62)
                     { jjCheckNAdd(11); }
                  break;
               case 14:
                  if (curChar == 60)
                     { jjCheckNAdd(11); }
                  break;
               case 15:
                  if ((0x5000000000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(0, 3); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 46)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 46)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 46)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 46)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
                  if (curChar == 61)
                     { jjCheckNAddStates(4, 7); }
                  break;
               case 31:
                  if (curChar == 62 && kind > 114)
                     kind = 114;
                  break;
               case 32:
                  if (curChar == 60 && kind > 114)
                     kind = 114;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(17); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 5:
               case 8:
                  { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 1:
                  { jjAddStates(8, 9); }
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 9); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\53", "\55", "\52", "\57", "\45", 
"\104\157\165\142\154\145", "\111\156\164", "\125\111\156\164", "\106\154\157\141\164", 
"\123\164\162\151\156\147", "\102\157\157\154", "\103\150\141\162\141\143\164\145\162", null, "\46\46", 
"\41", "\174\174", null, "\72", "\55\76", "\42", "\54", "\77\77", "\75", 
"\143\154\141\163\163", "\144\145\151\156\151\164", "\145\156\165\155", 
"\145\170\164\145\156\163\151\157\156", "\146\165\156\143", "\151\155\160\157\162\164", "\151\156\151\164", 
"\151\156\157\165\164", "\151\156\164\145\162\156\141\154", "\154\145\164", 
"\157\160\145\162\141\164\157\162", "\160\162\151\166\141\164\145", "\160\165\142\154\151\143", 
"\163\164\141\164\151\143", "\163\164\162\165\143\164", "\163\165\142\163\143\162\151\160\164", 
"\164\171\160\145\141\154\151\141\163", "\166\141\162", "\164\145\162\155\151\156\141\164\157\162", 
"\163\145\160\141\162\141\164\157\162", "\142\162\145\141\153", "\143\141\163\145", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\145\154\163\145", 
"\146\141\154\154\164\150\162\157\165\147\150", "\146\157\162", "\151\146", "\151\156", "\162\145\164\165\162\156", 
"\163\167\151\164\143\150", "\167\150\145\162\145", "\167\150\151\154\145", "\173", "\175", "\50", "\51", 
"\133", "\135", "\141\163", "\143\141\164\143\150", "\146\141\154\163\145", 
"\151\163", "\156\151\154", "\162\145\164\150\162\157\167\163", "\163\165\160\145\162", 
"\163\145\154\146", "\123\145\154\146", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\165\145", "\164\162\171", "\141\163\163\157\143\151\141\164\151\166\151\164\171", 
"\143\157\156\166\145\156\151\145\156\143\145", "\144\171\156\141\155\151\143", "\144\151\144\123\145\164", 
"\146\151\156\141\154", "\147\145\164", "\151\156\146\151\170", "\151\156\144\151\162\145\143\164", 
"\154\141\172\171", "\154\145\146\164", "\155\165\164\141\164\151\156\147", "\156\157\156\145", 
"\156\157\156\155\165\164\141\164\151\156\147", "\157\160\164\151\157\156\141\154", "\157\166\145\162\162\151\144\145", 
"\160\157\163\164\146\151\170", "\160\162\145\143\145\144\145\156\143\145", "\160\162\145\146\151\170", 
"\160\162\157\164\157\143\157\154", "\120\162\157\164\157\143\157\154", "\162\145\161\165\151\162\145\144", 
"\162\151\147\150\164", "\163\145\164", "\124\171\160\145", "\165\156\157\167\156\145\144", 
"\167\145\141\153", "\167\151\154\154\123\145\164", "\160\162\151\156\164", 
"\162\145\141\144\114\151\156\145", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   19, 20, 22, 23, 11, 30, 31, 32, 1, 2, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TurixTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TurixTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[33];
    private final int[] jjstateSet = new int[2 * 33];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
