/* Turix.java */
/* Generated By:JavaCC: Do not edit this line. Turix.java */
package com.turix.TurixCC;

public class Turix implements TurixConstants {
    public static void main(String[] args) throws ParseException {
        System.out.println("Ingresa una expresi\u00f3n (ej: 10+20-5). Ctrl+D para terminar:");
        Turix parser = new Turix(System.in);
        parser.Start();
        System.out.println("\u2714 Expresi\u00f3n v\u00e1lida");
    }
    public Turix(SimpleCharStream stream) {
    this(new TurixTokenManager(stream));
}

  final public void Start() throws ParseException {
    ListaSentencias();
    jj_consume_token(0);
}

  final public void ListaSentencias() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOUBLE:
      case INT:
      case UINT:
      case FLOAT:
      case STRING:
      case BOOL:
      case FUNC:
      case LET:
      case VAR:
      case REPEAT:
      case IF:
      case RETURN:
      case SWITCH:
      case WHILE:
      case PRINT:
      case READLINE:
      case SQRT:
      case POW:
      case COS:
      case SIN:
      case LOG:
      case IDENT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Sentencia();
    }
}

  final public void Sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      DeclaracionVar();
      break;
      }
    case LET:{
      DeclaracionLet();
      break;
      }
    case IF:{
      DeclaracionIF();
      break;
      }
    case FUNC:{
      Func();
      break;
      }
    case RETURN:{
      RetornoSentencia();
      break;
      }
    case PRINT:{
      Imprimir();
      break;
      }
    case REPEAT:{
      SentenciaRepeat();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        LlamadoFunc();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT:{
          Asignacion();
          break;
          }
        case SWITCH:{
          Switch();
          break;
          }
        case WHILE:{
          SentenciaWhile();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

//Declaracion IF
  final public void DeclaracionIF() throws ParseException {
    jj_consume_token(IF);
    Condicion();
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      DecElse();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
}

  final public void DecElse() throws ParseException {
    jj_consume_token(ELSE);
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
}

  final public void Condicion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:
    case STRING_LITERAL:
    case MENOS:
    case DOUBLE:
    case INT:
    case UINT:
    case FLOAT:
    case STRING:
    case BOOL:
    case FALSE:
    case TRUE:
    case READLINE:
    case SQRT:
    case POW:
    case COS:
    case SIN:
    case LOG:
    case IDENT:{
      Exp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REL_OP:{
        jj_consume_token(REL_OP);
        Exp();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:
          case NOT:
          case OR:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:{
            jj_consume_token(AND);
            break;
            }
          case OR:{
            jj_consume_token(OR);
            break;
            }
          case NOT:{
            jj_consume_token(NOT);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Exp();
          jj_consume_token(REL_OP);
          Exp();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
      }
    case LET:{
      ListaLet();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void DeclaracionVar() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOS_PUN:{
      jj_consume_token(DOS_PUN);
      Tipo();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      Exp();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

  final public void DeclaracionLet() throws ParseException {
    jj_consume_token(LET);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOS_PUN:{
      jj_consume_token(DOS_PUN);
      Tipo();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      Exp();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
}

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case UINT:{
      jj_consume_token(UINT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      jj_consume_token(MAS);
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    case MULTIPLICACION:{
      jj_consume_token(MULTIPLICACION);
      break;
      }
    case DIVISION:{
      jj_consume_token(DIVISION);
      break;
      }
    case MODULO:{
      jj_consume_token(MODULO);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    Term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:
      case MULTIPLICACION:
      case DIVISION:
      case MODULO:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      Operadores();
      Term();
    }
}

  final public void funcionesDefinidas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SQRT:{
      jj_consume_token(SQRT);
      break;
      }
    case POW:{
      jj_consume_token(POW);
      break;
      }
    case COS:{
      jj_consume_token(COS);
      break;
      }
    case SIN:{
      jj_consume_token(SIN);
      break;
      }
    case LOG:{
      jj_consume_token(LOG);
      break;
      }
    case READLINE:{
      jj_consume_token(READLINE);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_2(2)) {
        LlamadoFunc();
      } else if (jj_2_3(2)) {
        ParametroLlamadaFun();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT:{
          jj_consume_token(IDENT);
          break;
          }
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
          break;
          }
        case STRING_LITERAL:{
          jj_consume_token(STRING_LITERAL);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void Func() throws ParseException {
    jj_consume_token(FUNC);
    jj_consume_token(IDENT);
    jj_consume_token(PAR_I);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      Parametros();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(PAR_F);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLECHA:{
      Retorno();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
}

  final public void Parametros() throws ParseException {
    Parametro();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMA);
      Parametro();
    }
}

  final public void Parametro() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(DOS_PUN);
    Tipo();
}

  final public void Retorno() throws ParseException {
    jj_consume_token(FLECHA);
    Tipo();
}

  final public void RetornoSentencia() throws ParseException {
    jj_consume_token(RETURN);
    Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTERROGACION:{
      jj_consume_token(INTERROGACION);
      Exp();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  final public void Imprimir() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(PAR_I);
    ListaExpPrint();
    jj_consume_token(PAR_F);
}

  final public void ListaExp() throws ParseException {
    Exp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      Exp();
    }
}

  final public void ListaExpPrint() throws ParseException {
    Exp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case STRING_LITERAL:
      case MENOS:
      case DOUBLE:
      case INT:
      case UINT:
      case FLOAT:
      case STRING:
      case BOOL:
      case FALSE:
      case TRUE:
      case READLINE:
      case SQRT:
      case POW:
      case COS:
      case SIN:
      case LOG:
      case IDENT:{
        Exp();
        break;
        }
      case TERMINATOR:
      case SEPARATOR:{
        Opcion_Print();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Opcion_Print() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TERMINATOR:{
      jj_consume_token(TERMINATOR);
      jj_consume_token(DOS_PUN);
      Exp();
      break;
      }
    case SEPARATOR:{
      jj_consume_token(SEPARATOR);
      jj_consume_token(DOS_PUN);
      Exp();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void SentenciaRepeat() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
    jj_consume_token(WHILE);
    Condicion();
}

  final public void Asignacion() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(IGUAL);
    Exp();
}

  final public void Switch() throws ParseException {
    jj_consume_token(SWITCH);
    Exp();
    jj_consume_token(K_I);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_7;
      }
      Case();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_KEYWORD:{
      DefaultCase();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(K_F);
}

  final public void Case() throws ParseException {
    jj_consume_token(CASE);
    Exp();
    jj_consume_token(DOS_PUN);
    ListaSentencias();
}

  final public void SentenciaWhile() throws ParseException {
    jj_consume_token(WHILE);
    Condicion();
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
}

  final public void ListaLet() throws ParseException {
    DeclaracionLet();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMA);
      DeclaracionLet();
    }
}

  final public void DefaultCase() throws ParseException {
    jj_consume_token(DEFAULT_KEYWORD);
    jj_consume_token(DOS_PUN);
    ListaSentencias();
}

  final public void LlamadoFunc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      jj_consume_token(IDENT);
      break;
      }
    case READLINE:
    case SQRT:
    case POW:
    case COS:
    case SIN:
    case LOG:{
      funcionesDefinidas();
      break;
      }
    case DOUBLE:
    case INT:
    case UINT:
    case FLOAT:
    case STRING:
    case BOOL:{
      Tipo();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PAR_I);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:
    case STRING_LITERAL:
    case MENOS:
    case DOUBLE:
    case INT:
    case UINT:
    case FLOAT:
    case STRING:
    case BOOL:
    case FALSE:
    case TRUE:
    case READLINE:
    case SQRT:
    case POW:
    case COS:
    case SIN:
    case LOG:
    case IDENT:{
      ListaExp();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(PAR_F);
}

  final public void ParametroLlamadaFun() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(DOS_PUN);
    Term();
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_Tipo_245_5_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_LlamadoFunc_375_11_11()
 {
    if (jj_3R_funcionesDefinidas_261_2_13()) return true;
    return false;
  }

  private boolean jj_3R_LlamadoFunc_375_33_12()
 {
    if (jj_3R_Tipo_245_5_14()) return true;
    return false;
  }

  private boolean jj_3R_ParametroLlamadaFun_381_1_10()
 {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(DOS_PUN)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_ParametroLlamadaFun_381_1_10()) return true;
    return false;
  }

  private boolean jj_3R_funcionesDefinidas_261_2_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_LlamadoFunc_375_1_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_3R_LlamadoFunc_375_11_11()) {
    jj_scanpos = xsp;
    if (jj_3R_LlamadoFunc_375_33_12()) return true;
    }
    }
    if (jj_scan_token(PAR_I)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_LlamadoFunc_375_1_9()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_LlamadoFunc_375_1_9()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TurixTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3f000,0x0,0x0,0x0,0x380000,0x380000,0x400000,0x3f160,0x800000,0x10000000,0x800000,0x10000000,0x3f000,0xf80,0x100,0xf80,0x0,0x20,0x40,0x0,0x1000000,0x4000000,0x8000000,0x4000000,0x4000000,0x3f160,0x0,0x0,0x0,0x4000000,0x3f000,0x3f160,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x5a204042,0xa204042,0x50000000,0x400000,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x40000,0x100000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x0,0x0,0x0,0x0,0x0,0x10080,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x1fe000,0x2000,0x100000,0x0,0x0,0x0,0x0,0x1fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc000,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x1fc000,0x0,0x0,0x0,0x0,0x1fc000,0x1fc000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Turix(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Turix(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TurixTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Turix(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TurixTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TurixTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Turix(TurixTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TurixTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[120];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 32; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 120; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
