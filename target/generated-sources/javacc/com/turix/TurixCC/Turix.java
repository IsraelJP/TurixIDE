/* Turix.java */
/* Generated By:JavaCC: Do not edit this line. Turix.java */
package com.turix.TurixCC;

public class Turix implements TurixConstants {
    public static void main(String[] args) throws ParseException {
        System.out.println("Ingresa una expresi\u00f3n (ej: 10+20-5). Ctrl+D para terminar:");
        Turix parser = new Turix(System.in);
        parser.Start();
        System.out.println("\u2714 Expresi\u00f3n v\u00e1lida");
    }
    public Turix(SimpleCharStream stream) {
    this(new TurixTokenManager(stream));
}

  final public void Start() throws ParseException {
    ListaSentencias();
    jj_consume_token(0);
}

  final public void ListaSentencias() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case STRING_LITERAL:
      case MENOS:
      case DOUBLE:
      case INT:
      case UINT:
      case FLOAT:
      case STRING:
      case BOOL:
      case FUNC:
      case LET:
      case VAR:
      case IF:
      case RETURN:
      case PAR_I:
      case FALSE:
      case TRUE:
      case PRINT:
      case READLINE:
      case IDENT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Sentencia();
    }
}

  final public void Sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      DeclaracionVar();
      break;
      }
    case LET:{
      DeclaracionLet();
      break;
      }
    case IF:{
      DeclaracionIF();
      break;
      }
    case NUM:
    case STRING_LITERAL:
    case MENOS:
    case DOUBLE:
    case INT:
    case UINT:
    case FLOAT:
    case STRING:
    case BOOL:
    case PAR_I:
    case FALSE:
    case TRUE:
    case READLINE:
    case IDENT:{
      Exp();
      break;
      }
    case FUNC:{
      Func();
      break;
      }
    case RETURN:{
      RetornoSentencia();
      break;
      }
    case PRINT:{
      Imprimir();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Declaracion IF
  final public void DeclaracionIF() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PAR_I);
    Condicion();
    jj_consume_token(PAR_F);
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
}

  final public void Condicion() throws ParseException {
    Exp();
    jj_consume_token(REL_OP);
    Exp();
}

  final public void DeclaracionVar() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOS_PUN:{
      jj_consume_token(DOS_PUN);
      Tipo();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      Exp();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
}

  final public void DeclaracionLet() throws ParseException {
    jj_consume_token(LET);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOS_PUN:{
      jj_consume_token(DOS_PUN);
      Tipo();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      Exp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTERROGACION:{
        jj_consume_token(INTERROGACION);
        Exp();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case UINT:{
      jj_consume_token(UINT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    Term();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        jj_consume_token(MAS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
    }
}

  final public void Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case IDENT:{
      jj_consume_token(IDENT);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case PAR_I:{
      jj_consume_token(PAR_I);
      Exp();
      jj_consume_token(PAR_F);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case READLINE:{
      jj_consume_token(READLINE);
      jj_consume_token(PAR_I);
      jj_consume_token(PAR_F);
      break;
      }
    case DOUBLE:
    case INT:
    case UINT:
    case FLOAT:
    case STRING:
    case BOOL:{
      Tipo();
      jj_consume_token(PAR_I);
      Exp();
      jj_consume_token(PAR_F);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Func() throws ParseException {
    jj_consume_token(FUNC);
    jj_consume_token(IDENT);
    jj_consume_token(PAR_I);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      Parametros();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(PAR_F);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLECHA:{
      Retorno();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(K_I);
    ListaSentencias();
    jj_consume_token(K_F);
}

  final public void Parametros() throws ParseException {
    Parametro();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      Parametro();
    }
}

  final public void Parametro() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(DOS_PUN);
    Tipo();
}

  final public void Retorno() throws ParseException {
    jj_consume_token(FLECHA);
    Tipo();
}

  final public void RetornoSentencia() throws ParseException {
    jj_consume_token(RETURN);
    Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTERROGACION:{
      jj_consume_token(INTERROGACION);
      Exp();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
}

  final public void Imprimir() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(PAR_I);
    ListaExpPrint();
    jj_consume_token(PAR_F);
}

  final public void ListaExp() throws ParseException {
    Exp();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMA);
      Exp();
    }
}

  final public void ListaExpPrint() throws ParseException {
    Exp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case STRING_LITERAL:
      case MENOS:
      case DOUBLE:
      case INT:
      case UINT:
      case FLOAT:
      case STRING:
      case BOOL:
      case PAR_I:
      case FALSE:
      case TRUE:
      case READLINE:
      case IDENT:{
        Exp();
        break;
        }
      case TERMINATOR:
      case SEPARATOR:{
        Opcion_Print();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Opcion_Print() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TERMINATOR:{
      jj_consume_token(TERMINATOR);
      jj_consume_token(DOS_PUN);
      Exp();
      break;
      }
    case SEPARATOR:{
      jj_consume_token(SEPARATOR);
      jj_consume_token(DOS_PUN);
      Exp();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public TurixTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3f160,0x3f160,0x1000000,0x20000000,0x1000000,0x10000000,0x20000000,0x3f000,0x100,0x180,0x180,0x3f060,0x0,0x2000000,0x8000000,0x10000000,0x8000000,0x8000000,0x3f160,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x14008084,0x14008084,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x30000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x20104,0x20104,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20104,0x0,0x0,0x0,0x0,0x0,0x0,0x20104,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x1c000,0x1c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x10000,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,};
	}

  /** Constructor with InputStream. */
  public Turix(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Turix(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TurixTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Turix(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TurixTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TurixTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Turix(TurixTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TurixTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[115];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 115; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
